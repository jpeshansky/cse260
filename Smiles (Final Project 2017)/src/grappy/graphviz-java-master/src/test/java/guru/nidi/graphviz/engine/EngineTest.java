/*
 * Copyright Â© 2015 Stefan Niederhauser (nidin@gmx.ch)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package guru.nidi.graphviz.engine;

import guru.nidi.graphviz.service.DefaultExecutor;
import guru.nidi.graphviz.service.SystemUtils;
import org.apache.commons.exec.CommandLine;
import org.junit.*;
import org.junit.rules.TemporaryFolder;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;

import static guru.nidi.graphviz.engine.Format.SVG_STANDALONE;
import static org.hamcrest.CoreMatchers.startsWith;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.mock;

public class EngineTest {
    private static final String START1_7 =
            line("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>") +
                    line("<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"") +
                    line(" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">") +
                    line("<!-- Generated by graphviz version 2.40.1 (20161225.0304)") +
                    line(" -->") +
                    line("<!-- Title: g Pages: 1 -->") +
                    "<svg";

    @Rule
    public TemporaryFolder dotFolder = new TemporaryFolder();

    @After
    public void end() {
        Graphviz.releaseEngine();
    }

    @Test
    public void jdk() {
        Graphviz.useEngine(new GraphvizJdkEngine());
        assertThat(Graphviz.fromString("graph g {a--b}").render(SVG_STANDALONE).toString(), startsWith(START1_7));
    }

    @Test
    public void server() {
        GraphvizServerEngine.stopServer();
        try {
            Graphviz.useEngine(new GraphvizServerEngine());
            assertThat(Graphviz.fromString("graph g {a--b}").render(SVG_STANDALONE).toString(), startsWith(START1_7));
        } finally {
            GraphvizServerEngine.stopServer();
        }
    }

    @Test
    public void v8() {
        Graphviz.useEngine(new GraphvizV8Engine());
        assertThat(Graphviz.fromString("graph g {a--b}").render(SVG_STANDALONE).toString(), startsWith(START1_7));
    }

    @Test
    public void cmdLine() throws IOException, InterruptedException {
        final File dotFile = setUpFakeDotFile();
        final DefaultExecutor cmdExecutor = setUpFakeStubCommandExecutor();

        final String envPath = dotFile.getParent();
        Graphviz.useEngine(new GraphvizCmdLineEngine(envPath, cmdExecutor));

        assertThat(Graphviz.fromString("graph g {a--b}").render(SVG_STANDALONE).toString(), startsWith(START1_7));
    }

    /**
     * Test to check if we can set the output path and name of the dot file
     */
    @Test
    public void cmdLineOutputDotFile() throws IOException, InterruptedException {
        final File dotFile = setUpFakeDotFile();
        final DefaultExecutor cmdExecutor = setUpFakeStubCommandExecutor();

        final String envPath = dotFile.getParent();

        final File dotOutputFolder = dotFolder.newFolder();
        final String dotOutputName = "test123";

        // Configure engine to output the dotFile to dotOutputFolder
        final GraphvizCmdLineEngine engine = new GraphvizCmdLineEngine(envPath, cmdExecutor);
        engine.setDotOutputFile(dotOutputFolder.getAbsolutePath(), dotOutputName);

        Graphviz.useEngine(engine);

        // Do execution
        Graphviz.fromString("graph g {a--b}").render(SVG_STANDALONE).toString();

        assertTrue(new File(dotOutputFolder.getAbsolutePath(), dotOutputName + ".dot").exists());
    }

    private File setUpFakeDotFile() throws IOException {
        String filename = "dot";
        if (SystemUtils.IS_OS_WINDOWS) {
            filename = filename + ".exe";
        }

        // Add a fake dot executable to the temporary dotFolder
        final File dotFile = this.dotFolder.newFile(filename);
        dotFile.setExecutable(true);
        return dotFile;
    }

    private DefaultExecutor setUpFakeStubCommandExecutor() throws IOException, InterruptedException {
        final DefaultExecutor cmdExecutor = mock(DefaultExecutor.class);
        doAnswer(invocationOnMock -> {
            final File workingDirectory = invocationOnMock.getArgumentAt(1, File.class);

            final File svgInput = new File(getClass().getClassLoader().getResource("outfile1.svg").getFile());
            final File svgOutputFile = new File(workingDirectory.getAbsolutePath() + "/outfile.svg");
            Files.copy(svgInput.toPath(), svgOutputFile.toPath());
            return null;
        }).when(cmdExecutor).execute(any(CommandLine.class), any(File.class));
        return cmdExecutor;
    }

    private static String line(String s) {
        return s + System.getProperty("line.separator");
    }
}
